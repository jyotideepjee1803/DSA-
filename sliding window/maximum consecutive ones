1004
Given a binary array nums and an integer k, return the maximum number of consecutive 1's in the array if you can flip at most k 0's.
Example 1:

Input: nums = [1,1,1,0,0,0,1,1,1,1,0], k = 2
Output: 6
Explanation: [1,1,1,0,0,1,1,1,1,1,1]
Bolded numbers were flipped from 0 to 1. The longest subarray is underlined.
Example 2:

Input: nums = [0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], k = 3
Output: 10
Explanation: [0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1]
Bolded numbers were flipped from 0 to 1. The longest subarray is underlined.
 

Constraints:

1 <= nums.length <= 105
nums[i] is either 0 or 1.
0 <= k <= nums.length

class Solution {
public:
    int longestOnes(vector<int>& nums, int k) {
        int start = 0, end = 0, mxlen = 0, n = nums.size(), zercnt = 0;
        
        for(;end<n;++end){
            
            //get the zero count for current window : 
            if(nums[end] == 0){
                zercnt++;
            }
            
            //when zerocount for certain window exceeds k, decrease the zero_count and shrink the window :
            while(zercnt > k){
                if(nums[start] == 0)
                    zercnt--;
                
                //shrinking window when the current window has greater than k zeroes
                start++;
            }
            mxlen = max(end-start+1, mxlen);
        }
        
        return mxlen;
    }
};
