83. Remove Duplicates from Sorted List

Given the head of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well.

Example 1:

Input: head = [1,1,2]
Output: [1,2]


Example 2:

Input: head = [1,1,2,3,3]
Output: [1,2,3]

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* deleteDuplicates(ListNode* head) {
        if(head == NULL || head->next==NULL){
            return head;
        }
        ListNode* temp = head;
        //we need to move the temp till the last element is reached : 
        while(temp->next!=NULL){
            if(temp->val == temp->next->val){
                //storing the duplicate node
                ListNode* del = temp->next;
                //linking temp to the different element which isn't duplicate
                temp->next = temp->next->next;
                
                //deleting the one of the duplicates
                delete del;
            }
            else{
                temp = temp->next;
            }
        }
        return head;
    }
};
