21. Merge Two Sorted Lists
You are given the heads of two sorted linked lists list1 and list2.
Merge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists.

Return the head of the merged linked list.
Example 1:


Input: list1 = [1,2,4], list2 = [1,3,4]
Output: [1,1,2,3,4,4]

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        ListNode *dummy = new ListNode(-1);
        ListNode *tail = dummy;
        
        while(list1!=NULL and list2!=NULL){
            if(list1->val < list2->val){
                tail->next = list1;
                tail = list1;
                list1 = list1->next;
            }
            
            else{
                tail->next = list2;
                tail = list2;
                list2 = list2->next;
            }
        }
        
        if(list1==NULL) tail->next = list2;
        if(list2==NULL) tail->next = list1;
        
        return dummy->next;
        
    }
};
