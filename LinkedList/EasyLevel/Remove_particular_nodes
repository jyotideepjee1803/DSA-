203. Remove Linked List Elements

Given the head of a linked list and an integer val, remove all the nodes of the linked list that has Node.val == val, and return the new head.

Example 1:

Input: head = [1,2,6,3,4,5,6], val = 6
Output: [1,2,3,4,5]
Example 2:

Input: head = [], val = 1
Output: []

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* removeElements(ListNode* head, int val) {
        if(head==NULL){
            return NULL;
        }
        ListNode* dummy = new ListNode(-1);
        dummy->next = head;
        
        ListNode* tail = dummy;
        while(tail!=NULL && tail->next!=NULL){
            if(tail->next->val == val){
                ListNode* temp = tail->next;
                tail->next = tail->next->next;
                delete temp;
            }
            else{
                tail=tail->next;
            }
        }
        return dummy->next;
    }
};
