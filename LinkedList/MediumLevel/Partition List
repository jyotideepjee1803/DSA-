86. Partition List
Given the head of a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.

You should preserve the original relative order of the nodes in each of the two partitions.

Example 1:


Input: head = [1,4,3,2,5,2], x = 3
Output: [1,2,2,4,3,5]
Example 2:

Input: head = [2,1], x = 2
Output: [1,2]

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* partition(ListNode* head, int x) {
        ListNode* h1 = new ListNode(0);
        ListNode* h2 = new ListNode(0);
        
        ListNode* temp = head, *l1=h1, *l2=h2;
        while(temp){
            if(temp->val < x){
                l1->next = temp;
                l1 = temp;
            }
            
            else{
                l2->next = temp;
                l2 = temp;
            }
            
            temp = temp->next;
        }
        
        //the next of last of LL2 is NULL : 
        l2->next = NULL;
        l1->next = h2->next;
        
        return h1->next;
        
    }
};
