19. Remove Nth Node From End of List

Given the head of a linked list, remove the nth node from the end of the list and return its head.

Example 1:
1->2->3->4->5    , n=2
     |
     v
1->2->3->5     

Input: head = [1,2,3,4,5], n = 2
Output: [1,2,3,5]

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */

//BRUTE FORCE :

class Solution {
public:
    int len(ListNode* head){
        if(!head) return 0;
        
        int length = 0;
        while(head){
            length++;
            head=head->next;
        }
        
        return length;
    }
    
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        int l = len(head);
        int front = l - n;
        
        ListNode *dummy = new ListNode(-1);
        dummy->next = head;
        ListNode *temp = dummy;
        
        int i=0;
        while(i < front){
            temp = temp->next;
            i++;
        }
        
        ListNode *temp2 = temp->next;
        
        temp->next = temp2->next;
        
        delete temp2;
        
        return dummy->next;
    }
};
 
 //TWO POINTER APPROACH/SINGLE PASS(OPTIMISED)
 
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        ListNode *fast = head, *slow = head;
        
        //stagger the two pointers fast and slow such that they are separated by 'n' nodes : 
        //such that next when fast reaches end, slow stays at nth node from end : 
        
        for(int i=0;i<n;i++){
            fast = fast->next;
        }
        
        //special case : if after separating fast and slow by 'n' nodes 
        //fast crosses the end to NULL, then the second element would be the nth element from back
        if(!fast) return head->next;
        
        //moving fast towards n :
        while(fast->next){
            fast = fast->next;
            slow = slow->next;
        }
        
        //detach the (nth node from back) from the LL : 
        ListNode *toDel = slow->next;
        
        slow->next = slow->next->next;
        
        delete toDel;
        return head;
    }
};
