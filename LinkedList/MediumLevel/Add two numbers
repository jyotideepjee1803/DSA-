2. Add Two Numbers
You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

 

Example 1:


Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        int sum = 0;
        ListNode *l3 = new ListNode(0);
        ListNode *temp = l3;
        
        while(l1!=NULL || l2!=NULL || sum>0){
            
            //add the corresponding digits :
            
            if(l1!=NULL){
                sum += l1->val;
                l1 = l1->next;
            }
            
            if(l2!=NULL){
                sum += l2->val;
                l2 = l2->next;
            }
            
            
            //make node of the digit formed : 
            ListNode *node = new ListNode(sum%10);
            
            //keep only the carry term in 'sum' that will get added to the sum of digits : 
            sum /= 10;
            
            //attach the digit to l3 :
            temp->next = node;
            temp = node;
        }
        return l3->next;
    }
};
