92. Reverse Linked List II

Given the head of a singly linked list and two integers left and right where left <= right, 
reverse the nodes of the list from position left to position right, and return the reversed list.

Example 1:

Input: head = [1,2,3,4,5], left = 2, right = 4
Output: [1,4,3,2,5]

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseBetween(ListNode* head, int left, int right) {
        
        if(!head || left == right) return head;
        
        ListNode *dummy = new ListNode(0);
        dummy->next = head;
        ListNode *beforeLeft = dummy;
        
        int i=1;
        while(i<left){
            beforeLeft = beforeLeft->next;
            i++;
        }
        
        ListNode *working = beforeLeft->next;
        while(left < right){
            ListNode *ToExtract = working->next;
            working->next = working->next->next;
            
            ToExtract->next = beforeLeft->next;
            beforeLeft->next = ToExtract;
            left++;
        }
        
        return dummy->next;
        
    }
};
