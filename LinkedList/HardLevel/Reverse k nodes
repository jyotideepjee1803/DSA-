25. Reverse Nodes in k-Group

Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.

k is a positive integer and is less than or equal to the length of the linked list. 
If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.

You may not alter the values in the list's nodes, only nodes themselves may be changed.

Example 1:


Input: head = [1,2,3,4,5], k = 2
Output: [2,1,4,3,5]

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    void rev(ListNode *start, ListNode *end){
        ListNode *p = NULL, *c = start, *n = start->next;
        while(p!=end){
            c->next = p;
            p = c;
            c = n;
            if(n){
                n = n->next;
            }
        }
        
    }
    
    //RECURSIVE APPROACH : 
    ListNode* reverseKGroup(ListNode* head, int k) {
        
        if(head == NULL || head->next == NULL || k==1) return head;
        
        ListNode *e = head, *s = head;
        
        int i = k-1;
        
        //reach the 1st kth element from left : 
        while(i--){
            e = e->next;
        }
        
        //reverse groups of k from the remaining LL : 
        ListNode *newLL = reverseKGroup(e->next, k);
        
        //reverse the first group : 
        rev(s,e);
        
        //connect the first reversed half to the already reversed part: 
        s->next = newLL;
        
        //previous end of first grp would be the new head : 
        return e;
    }
    
    //ITERATIVE APPROACH : 
    ListNode* reverseKGroup(ListNode* head, int k) {
        if(head == NULL or k == 1 or head->next == NULL) return head;
        
        ListNode *dummy = new ListNode(-1);
        dummy->next = head;
        ListNode *beforeStart = dummy, *e = head;
    
        int i = 0;
        while(e){
            i++;
            
            if(i%k == 0){
                ListNode *s = beforeStart->next, *temp = e->next;

                rev(s,e);
                
                //connecting reversed part to the rest of LL
                s->next = temp;
                
                //connecting beforeStart to former end : 
                beforeStart->next = e;
                
                //update beforeStart : 
                beforeStart = s;
                
                //update to new end :
                e = temp;
            }
            else{
                e = e->next;
            }
        }
        
        return dummy->next;
    }
};
