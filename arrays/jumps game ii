45. Jump Game II
Given an array of non-negative integers nums, you are initially positioned at the first index of the array.

Each element in the array represents your maximum jump length at that position.

Your goal is to reach the last index in the minimum number of jumps.

You can assume that you can always reach the last index.

Input: nums = [2,3,1,1,4]
Output: 2
Explanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.

class Solution {
public:
    int jump(vector<int>& nums) {
        
        int pos = nums.size()-1, jumps = 0;
        
        while(pos!=0){
            for(int i=0;i<pos;i++){
                
                //if the current strength of jump is >= the length of destination 
                //then take a jump to this pos from initial indx and count it
                //pos-i = distance from ith indx to the destination : 
                if(nums[i] >= pos-i){
                    pos = i;
                    jumps++;
                    break;
                }
            }
        }
        
        return jumps;
    }
    
    
//bfs approach : 
class Solution {
public:
    int jump(vector<int>& nums) {
        int n = nums.size();
        int jumps = 0, l = 0, r = 0;
    
        while(r < n-1){
            int farthest = 0;
            for(int i=l;i<=r;i++){
                
                //the farthest distance we can reach from the current element in the current level : 
                farthest = max(farthest, i+nums[i]);
            }
            
            //shift the window to get the new level: 
            l = r+1;
            r = farthest;
            jumps ++;
        }
        
        return jumps;
    }
};
};
