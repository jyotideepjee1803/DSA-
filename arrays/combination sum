39. Combination Sum

Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. 
You may return the combinations in any order.

The same number may be chosen from candidates an unlimited number of times. Two combinations are unique if the frequency of at least one of the chosen numbers is different.

It is guaranteed that the number of unique combinations that sum up to target is less than 150 combinations for the given input.

Example 1:

Input: candidates = [2,3,6,7], target = 7
Output: [[2,2,3],[7]]
Explanation:
2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.
7 is a candidate, and 7 = 7.
These are the only two combinations.

class Solution {
public:
    vector<vector<int>> ans;
    
    void solve(int idx, vector<int>& candidates, vector<int> &temp, int target){
        
        //base cases :
        if(target == 0){
            ans.push_back(temp);
            return;
        }
        
        if(idx == candidates.size() || target < 0){
            return;
        }
        
        //not include the term in cintributing to the sum and move to the next indx
        solve(idx+1,candidates,temp,target);
        
        
        //include the term in contributing to the sum 
        //decreasing the target, as we need to include those numbers which can sum upto the decreased target : 
        temp.push_back(candidates[idx]);
        solve(idx,candidates,temp,target-candidates[idx]);
        
       
        //back track
        //if the last entered element is not suitable to contribute to sum pop it out
        temp.pop_back();
        
    }
    
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        vector<int> temp;
        
        solve(0,candidates,temp,target);
        
        return ans;
    }
};
