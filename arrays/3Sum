//15. Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        int n = nums.size();
        vector<vector<int>> ans;
        
        sort(nums.begin(),nums.end());
        
        for(int i=0;i<n;i++){
            int target = -nums[i];
            int l = i+1,h = n-1;
            
            while(l<h){
                int sum = nums[l] + nums[h];
                
                if(sum < target)
                    l++;
                
                else if(sum > target)
                    h--;
                
                else{
                    vector<int> three = {nums[i],nums[l],nums[h]};
                    ans.push_back(three);
                    
                    //process duplicates of three[1]
                    while(l < h and nums[l] == three[1]) l++;
                    
                    //process duplicate of three[2]
                    while(l<h and nums[h] == three[2]) h--;
                    
                }
            }
            
            //process duplicates of three[0]
            while(i+1<n and nums[i+1] == nums[i]) i++;
        }
        
        return ans;
        
    }
};
